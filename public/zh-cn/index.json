






[{"content":"\rBlowfish is packed with tons of features.\rThe original aim of Blowfish was to develop a theme that was simple and lightweight. The theme is a fork of Congo and expands its initial vision.\nTailwind CSS 3.0 #\rTailwind CSS is at the heart of Blowfish and this release contains the very latest Tailwind CSS version 3. It brings with it performance optimisations and support for some great new CSS features.\nMultilingual support #\rA highly requested feature, Blowfish is now multilingual! If you publish your content in multiple languages, the site will be built with all the translations available.\n🇬🇧 🇩🇪 🇫🇷 🇪🇸 🇨🇳 🇧🇷 🇹🇷 🇧🇩\rThanks to submissions from the community, Blowfish has already been translated into twenty-six languages with more to be added over time. By the way, pull requests for new languages are always welcome!\nRTL language support #\rOne of the benefits of the new Tailwind and Multilingual features is the ability to add RTL language support. When enabled, the entire site will reflow content from right-to-left. Every element in the theme has been restyled to ensure it looks great in this mode which aids authors who wish to generate content in RTL languages.\nRTL is controlled on a per-language basis so you can mix and match both RTL and LTR content in your projects and the theme will respond accordingly.\nAutomatic image resizing #\rA big change in Blowfish 2.0 is the addition of automatic image resizing. Using the power of Hugo Pipes, images in Markdown content are now automatically scaled to different output sizes. These are then presented using HTML srcset attributes enabling optimised file sizes to be served to your site visitors.\n\u0026lt;!-- Markdown: ![My image](image.jpg) --\u0026gt; \u0026lt;img srcset=\u0026#34; /image_320x0_resize_q75_box.jpg 320w, /image_635x0_resize_q75_box.jpg 635w, /image_1024x0_resize_q75_box.jpg 1024w, /image_1270x0_resize_q75_box.jpg 2x\u0026#34; src=\u0026#34;/image_635x0_resize_q75_box.jpg\u0026#34; alt=\u0026#34;My image\u0026#34; /\u0026gt; Best of all there\u0026rsquo;s nothing you need to change! Simply insert standard Markdown image syntax and let the theme do the rest. If you want a little more control, the figure shortcode has been completely rewritten to provide the same resizing benefits.\nSite search #\rPowered by Fuse.js, site search allows visitors to quickly and easily find your content. All searches are performed client-side meaning there\u0026rsquo;s nothing to configure on the server and queries are performed super fast. Simply enable the feature in your site configuration and you\u0026rsquo;re all set. Oh, and it also supports full keyboard navigation!\nTables of contents #\rA highly requested feature, Blowfish now supports tables of contents on article pages. You can see it in action on this page. The contents are fully responsive and will adjust to take advantage of the space available at different screen resolutions.\nAvailable on a global or per article basis, the table of contents can be fully customised using standard Hugo configuration values, allowing you to adjust the behaviour to suit your project.\nAccessibility improvements #\rFrom adding ARIA descriptions to more items or simply adjusting the contrast of certain text elements, this release is the most accessible yet.\nVersion 2 also introduces \u0026ldquo;skip to content\u0026rdquo; and \u0026ldquo;scroll to top\u0026rdquo; links that enable quick navigation. There\u0026rsquo;s also keyboard shortcuts for enabling items like search without reaching for the mouse.\nThe new image resizing features also provide full control over alt and title elements enabling an accessible experience for all visitors.\nA whole lot more #\rThere\u0026rsquo;s countless other features to explore. From being able to display taxonomies on articles and list pages, to using the new headline author parameter to customise your homepage. There\u0026rsquo;s also improved JSON-LD structured data which further optimises SEO performance.\n","date":"6 May 2024","externalUrl":null,"permalink":"/docs/consulting/","section":"Services","summary":"Blowfish is packed with tons of features.\rThe original aim of Blowfish was to develop a theme that was simple and lightweight. The theme is a fork of Congo and expands its initial vision.","title":"AI Consulting","type":"default"},{"content":"","date":"6 May 2024","externalUrl":null,"permalink":"/categories/consulting/","section":"Categories","summary":"","title":"Consulting","type":"categories"},{"content":"","date":"6 May 2024","externalUrl":null,"permalink":"/series/documentation/","section":"Series","summary":"","title":"Documentation","type":"series"},{"content":"\rEmpowering businesses with Cutting-Edge AI.\rWelcome to AI SYSTEMS TODAY, a premier IT consultancy based in Athens. Specializing in advanced AI solutions tailored for diverse industries, we pride ourselves on our team of seasoned experts dedicated to driving innovation and delivering tangible outcomes. Our mission is clear: to unlock the full potential of AI, fostering growth and success for businesses navigating the complexities of the digital age.\n","date":"6 May 2024","externalUrl":null,"permalink":"/docs/","section":"Services","summary":"Empowering businesses with Cutting-Edge AI.\rWelcome to AI SYSTEMS TODAY, a premier IT consultancy based in Athens. Specializing in advanced AI solutions tailored for diverse industries, we pride ourselves on our team of seasoned experts dedicated to driving innovation and delivering tangible outcomes.","title":"Services","type":"docs"},{"content":"\rProfessional Summary #\rA seasoned expert in Artificial Intelligence with a specialization in Machine Learning, Deep Learning, and Data Engineering. With over a decade in the data world. Seamlessly bridge the gap between complex data-driven algorithms and their real-world applications. Proficiency extends to data analysis and data science, and data engineering; crafting models tailored to address unique challenges. As a senior figure in the industry, I have consistently demonstrated visionary leadership, driving innovation while mentoring teams to excellence.\nProfessional Experience: #\rSenior Cloud Architect #\rBlazeclan Technologies\nAthens, Attiki, Greece\n12-2023 - Present\nSpearheaded the strategic implementation and management of innovative cloud solutions. Played a crucial role in selecting appropriate cloud technologies and platforms. Conducted cloud readiness assessments, architected cloud solutions across AWS, Azure, and Google Cloud. Mentored junior architects and engineers in cloud security, cost management, and performance optimization. Technologies Used:\nAWS (EC2, S3, RDS, Lambda), Azure (Virtual Machines, Blob Storage, SQL Database), Google Cloud Platform, Kubernetes, Docker, Terraform, Ansible, Python, Jenkins, Grafana, Azure DevOps, Git.\nSenior DevOps Engineer #\rSword Group\nAthens, Attiki, Greece\n09-2023 – 12-2023\nManaged a pivotal migration project, transitioning significant data assets from legacy systems to modern, scalable cloud infrastructures. Developed and implemented a comprehensive DevOps strategy with CI/CD pipelines. Enhanced operational efficiency and reduced time to market for new features. Coached teams on best practices in DevOps. Technologies Used:\nAzure DevOps, Kubernetes, Docker, Jenkins, Terraform, Ansible, Azure Data Factory, Azure Blob Storage, CI/CD pipelines, Git.\nSenior Artificial Intelligence Engineer #\rMoments Hospice\nMinneapolis, Minnesota, USA\n06-2023 – 08-2023\nLed the development of an AI system to revolutionize palliative care management using machine learning and NLP algorithms. Conceptualized and integrated the solution with existing healthcare systems, ensuring compliance with standards. Collaborated with clinical staff to refine AI models for greater accuracy. Technologies Used:\nAzure Cognitive Services, Azure Machine Learning, Python, SQL Server, Azure Data Factory, Power BI, Microsoft Dataverse, Docker, Kubernetes, Git, TensorFlow, PyTorch.\nArtificial Intelligence Engineer #\rING\nAmsterdam, The Netherlands\n03-2023 – 06-2023\nDeveloped an MVP NLP solution using Large Language Models (LLM) for summarization. Consulted with the @Innovation manager to overcome technical challenges related to experimental technology. Technologies Used:\nAzure DevOps, Cognitive Services, Google Cloud Platform, Python.\nMachine Learning Engineer #\rSmartworkz\nUtrecht, The Netherlands\n09-2022 – 02-2023\nMachine Learning consultant and interviewer. Developed AWS workshops, blogs, and a project for keyword matching with Azure DevOps and AWS services. Technologies Used:\nHugo, GitHub, Forestry, Netlify, SageMaker, Azure DevOps, AWS Services.\nMachine Learning Engineer #\rVisualyst\nOslo, Norway\n10-2021 – 05-2022\nDeveloped and completed the AWS MLOps pipeline for detecting gambling ads on Norwegian TV channels. Technologies Used:\nSageMaker, YOLOv5, FastAPI, Docker, Linux, Git.\nData Scientist #\rTeleperformance\nPiraeus, Greece\n09-2020 – 09-2021\nWorked on projects including time-series analysis for calls prediction, CSAT KPI improvement using NLP emotion analysis. Technologies Used:\nPython, Jupyter, Grid Search, TensorFlow, PowerBI.\nSenior Data Scientist #\rCentricity\nNew York, USA\n07-2021 – 09-2021\nInvolved in projects related to sales prediction and emotion detection. Technologies Used:\nPython, Flask, Docker, TensorFlow.\nCEO-Founder #\rAI Systems Today\nAthens, Greece\n11-2015 – 09-2020\nBuilt infrastructure of containerized cloud services with AI. Specialized in Multi-Criteria Decision Analysis and Mathematical Programming. Technologies Used:\nPython, Azure Services, Google Earth.\nLecturer #\rInternational College of Portsmouth\nPortsmouth, UK\n09-2014 – 07-2016\nSkills \u0026amp; Expertise #\rMachine Learning \u0026amp; AI: TensorFlow, PyTorch, BERT, RoBERTa, Reinforcement Learning. Data Analysis \u0026amp; Science: Pandas, Numpy, Jupyter, Seaborn, PowerBI. Cloud \u0026amp; DevOps: AWS, Azure, Terraform, CloudFormation. Certifications #\rAWS: Certified Machine Learning – Specialty Coursera: Natural Language Processing Specialization Education #\rMSc Information Technology \u0026amp; Web Development #\rUniversity of West of Scotland, Glasgow\n09-2001 – 07-2004\nThesis: A prototype Analytic Hierarchy Process (AHP) application\nBSc Applied Physics #\rLiverpool John Moore’s University, Liverpool\n09-1984 – 07-1989\nThesis: Fall-out radiation effects of the Chernobyl Accident\nHobbies \u0026amp; Interests #\rNature Enthusiast: Passion for taking long walks in nature. Culinary Exploration: Enjoy exploring diverse cuisines. Continuous Learner: Committed to personal and professional growth. Music \u0026amp; Film: Love for storytelling and creativity. ","date":"6 May 2024","externalUrl":null,"permalink":"/about/","section":"About","summary":"Professional Summary #\rA seasoned expert in Artificial Intelligence with a specialization in Machine Learning, Deep Learning, and Data Engineering. With over a decade in the data world. Seamlessly bridge the gap between complex data-driven algorithms and their real-world applications.","title":"About","type":"about"},{"content":"","date":"2023-10-04","externalUrl":null,"permalink":"/zh-cn/tags/blowfish/","section":"标签","summary":"","title":"blowfish","type":"tags"},{"content":"","date":"2023-10-04","externalUrl":null,"permalink":"/zh-cn/","section":"Blowfish","summary":"","title":"Blowfish","type":"page"},{"content":"","date":"2023-10-04","externalUrl":null,"permalink":"/zh-cn/categories/blowfish/","section":"标签","summary":"","title":"Blowfish","type":"categories"},{"content":"","date":"2023-10-04","externalUrl":null,"permalink":"/zh-cn/guides/","section":"Guides","summary":"","title":"Guides","type":"guides"},{"content":"","date":"2023-10-04","externalUrl":null,"permalink":"/zh-cn/tags/hugo/","section":"标签","summary":"","title":"hugo","type":"tags"},{"content":"假装这里有一份 Nuno 的简介。\n","date":"2023-10-04","externalUrl":null,"permalink":"/zh-cn/authors/nunocoracao/","section":"作者列表示例","summary":"假装这里有一份 Nuno 的简介。","title":"Nuno Coração","type":"authors"},{"content":"","date":"4 October 2023","externalUrl":null,"permalink":"/categories/open-source/","section":"Categories","summary":"","title":"Open-Source","type":"categories"},{"content":"","date":"4 October 2023","externalUrl":null,"permalink":"/tags/tutorial/","section":"Tags","summary":"","title":"tutorial","type":"tags"},{"content":"Blowfish 支持基于 Hugo 的所有分类方法。同时，当前的标签预览页也支持展示自定义内容。\n在这里可以为每个分类添加额外的描述信息。查看下面的\r高级标签页面，了解更多。\n","date":"2023-10-04","externalUrl":null,"permalink":"/zh-cn/categories/","section":"标签","summary":"Blowfish 支持基于 Hugo 的所有分类方法。同时，当前的标签预览页也支持展示","title":"标签","type":"categories"},{"content":"Blowfish 支持基于 Hugo 的所有分类方法。同时，当前的标签预览页也支持展示自定义内容。\n在这里可以为每个分类添加额外的描述信息。查看下面的\r高级标签页面，了解更多。\n","date":"2023-10-04","externalUrl":null,"permalink":"/zh-cn/tags/","section":"标签","summary":"Blowfish 支持基于 Hugo 的所有分类方法。同时，当前的标签预览页也支持展示","title":"标签","type":"tags"},{"content":"","date":"2023-10-04","externalUrl":null,"permalink":"/zh-cn/categories/%E5%BC%80%E6%BA%90/","section":"标签","summary":"","title":"开源","type":"categories"},{"content":"一年前我创建了 Blowfish，这是一个为了打造我的个人主页而精心设计的 Hugo 主题。我决定将其作为一个开源项目。直到今天，Blowfish 已经变成了一个蓬勃发展的开源项目，在 GitHub 上拥有超过900个 star 和数百名用户。在本教程中，我将向你展示如何搭建并在几分钟内让你的网站运行起来。\nnunocoracao/blowfish\rPersonal Website \u0026amp; Blog Theme for Hugo\rJavaScript 1028\r307\rTL;DR #\r本指南的目标是指导新用户如何使用 Hugo 快速安装、管理和发布自己的网站。最终的版本可以看这个\r代码库——如果你想直接跳到结尾的话可以直接看这里。\n视觉风格只是 Blowfish 提供的众多特性之一。想要了解更多，我们鼓励你浏览\r文档，学习如何根据自己的需求自定义主题。另外，已经有许多其他用户使用该主题并提供了十分优秀的\r示例，来为你提供灵感。Blowfish 还提供了一些额外的基于 短代码 的功能——你可以在\r这里查看它们以获取更多灵感。\n设置你的环境 #\r让我们从安装工具开始。本指南涵盖了在 Mac 操作系统下的步骤，这些命令可能不适用于你的硬件和操作系统。如果你使用的是 Windows 或 Linux，请参考文档：\r安装 Hugo 和\rGitHub CLI。\n无论如何，如果你使用的是 MacOS，那么首先需要安装 brew ——一个专为 MacOS 的包管理器，这将有助于安装和管理其他工具。\n/bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; 安装完成 brew 后，让我们安装 Git, Hugo 和 GitHub CLI。\nbrew install git brew install hugo brew install gh 为你的网站代码创建一个文件夹，并在终端中打开（我在下面创建了 blowfish-tutorial 文件夹，当然你可以将其重命名为任何名称）。\nmkdir blowfish-tutorial cd blowfish-tutorial 进入文件夹后的下一步，就是初始化你本地的 git 仓库。\ngit init -b main 现在，让我们创建并同步本地仓库到 GitHub 仓库，这样你的代码就可以在远程存储。\ngh auth login gh repo create git push --set-upstream origin main 查看下面的图片，这是我的远程仓库的地址。同样地，你也可以随意更改以适应你自己的 GitHub 仓库。\n最后，创建一个 .gitignore 文件，它会自动排除某些文件，以防止这些文件传到远程仓库。下面的例子是我在 .gitignore 文件中添加的文件和文件夹。\n#others node_modules .hugo_build.lock # OS generated files .DS_Store .DS_Store? ._* .Spotlight-V100 .Trashes # Hugo public 最后一步是保存所有更改，并推送到你的远程仓库中。 The last step is to save all the changes to the repo.\ngit add . git commit -m “initial commit” git push 创建并配置站点 #\r所有的准备工作就绪后，创建和配置你的站点将会很容易。继续在上一部分你创建的文件夹内，让我们首先创建一个空的 Hugo 网站（不关联任何主题）。\nhugo new site --force . 执行完成后，尝试用下面的命令来运行你的网站。打开浏览器并访问 https://localhost:1313 即可查看你的网站。\nhugo server emmmm… 页面未找到404了，是吧？ 这是预期内的，你创建了一个空白网站，Hugo 不会添加任何默认的页面——换句话说，你的网站还没有任何页面可以显示。\n下一步，让我门使用 git submodules 来安装 Blowfish。通过 git submodules 安装可以让以后管理和升级 Blowfish 主题更加方便。\ngit submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish 接下来，在你的代码根目录下创建 config/_default/ 文件夹。现在你需要下载\r这些文件，并把它们放在刚刚创建的 _default 文件夹内。最终的文件结构看起来应该是这样的。\nconfig/_default/ ├─ config.toml ├─ languages.en.toml ├─ markup.toml ├─ menus.en.toml └─ params.toml ` 打开 config.toml 并把 theme = \u0026ldquo;blowfish” 这一样的注释取消掉，目前为止你已经准备好了。再次尝试运行网站，并打开浏览器在_\rhttps://localhost:1313_查看效果。\nhugo server 你应该能看到下面这样。目前我们还没有添加任何内容，所以还没有页面，但是 Blowfish 主题已经准备就绪，下面只需要配置。\n现在我们来配置主题。\n仅供参考 本指南不会详细介绍 Blowfish 中的所有特性和参数——如果想要了解所有的功能特性和参数，以及如何使用它们，请参考\rBlowfish 文档。\rmenus.en.toml #\r这个文件定义了你的顶部（banner）和底部（footer）的菜单结构。对于本指南，我们只使用菜单的这两部分：Posts 和 Tags。\nPosts - 用于展示网站中的所有内容条目的完整列表 Tags - 自动生成每篇文章的标签 为了实现这一点，请确保 menus.en.toml 文件中设置了以下参数。完成修改后，重新运行hugo server，你将会看到顶部菜单。\n[[main]] name = \u0026#34;Posts\u0026#34; pageRef = \u0026#34;posts\u0026#34; weight = 10 [[main]] name = \u0026#34;Tags\u0026#34; pageRef = \u0026#34;tags\u0026#34; weight = 30 languages.en.toml #\r这个文件配置了网站作者的详细信息。修改下面的内容来定义你自己的信息。\n[author] name = \u0026#34;名字在这\u0026#34; image = \u0026#34;profile.jpg\u0026#34; headline = \u0026#34;我是个好人\u0026#34; bio = \u0026#34;关于我的二三事\u0026#34; # 出现在每篇文章的作者卡片中 网站的图片需要防止在 assets 文件夹内。针对这一步，请将一张你的个人图片添加到这个文件夹，并命名为 profile.jpg。 你可以修改这个文件名，确保文件名和上面个人信息中 image 的参数值对应就行。如果你没有个人图片可用，你可以使用下面的图片继续教程。\nassets/profile.jpg\r最后一步是配置你的链接——社交媒体、GitHub 等等。该文件包含了所有支持的链接选项，不过他们被注释掉了。你可以将你希望展示的个人链接的配置项接触注释，也可以替换他们的展示顺序。\nparams.toml #\r这个文件是 Blowfish 的配置文件。大部分的视觉选项或自定义的选项可以通过它进行配置，它涵盖了 Blowfish 主题的多个功能特性。 对于本指南，我决定使用 background 布局，你也可以\r查看Blowfish主题其他的主页布局；同时使用了 Neon 颜色方案，你可以查看\r完整的颜色方案列表或者\r创建自己的颜色方案。\n将 image.jpg 文件添加到 assets 文件夹，它将会作为网站的背景。你可以挑选自己喜欢的，当然也可以用本指南中使用的这张图。\nassets/image.jpg\r现在让我们打开 params.toml 并开始配置。在这里我只会关注需要修改的值，不要再没看文档的情况下，删除此文件的其余部分。\n首先让我们确保上面提到的正确的颜色方案，开启图片优化，并设置默认背景图片。\ncolorScheme = \u0026#34;neon\u0026#34; disableImageOptimization = false defaultBackgroundImage = \u0026#34;image.jpg\u0026#34; # used as default for background images 接下来，让我们配置首页。我们选择了 background 布局，配置首页图片和最近文章。此外，可以使用 card view 卡片展示的方式来展现最新文章。最后让我们配置头部固定。\n[homepage] layout = \u0026#34;background\u0026#34; # valid options: page, profile, hero, card, background, custom homepageImage = \u0026#34;image.jpg\u0026#34; # used in: hero, and card showRecent = true showRecentItems = 6 showMoreLink = true showMoreLinkDest = \u0026#34;/posts\u0026#34; cardView = true cardViewScreenWidth = false layoutBackgroundBlur = true # only used when layout equals background [header] layout = \u0026#34;fixed\u0026#34; 现在配置文章和列表页面的展示。下面是他们的配置。\n[article] showHero = true heroStyle = \u0026#34;background\u0026#34; showSummary = true showTableOfContents = true showRelatedContent = true relatedContentLimit = 3 [list] showCards = true groupByYear = false cardView = true 如果你再次运行hugo server，你会看到类似下面这张图的效果。 If you run hugo server again, you should see something like the image below.\n在你的网站中添加内容 #\r创建一个文件夹/content/posts，在这个文件夹下添加你的帖子或文章。这也是你在菜单所配置的所有文章的根目录。在这个文件夹内，让我们创建一个新目录并命名为 myfirstpost。在这个目录中创建一个index.md文件作为你的文章，同样也在这个目录中添加featured.jpg或featured.png作为文章的缩略图。 参考下面这个示例。文件中的前几行是扉页参数（Front Matter），它定义了 Hugo 如何展示文章，更多的参数可以参考\r这里。\n--- title: \u0026#34;我的第一篇帖子\u0026#34; date: 2023-08-14 draft: false summary: \u0026#34;这是网站的第一篇你帖子\u0026#34; tags: [\u0026#34;space\u0026#34;] --- ## 一个副标题 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi nibh nisl, vulputate eu lacus vitae, maximus molestie libero. Vestibulum laoreet, odio et sollicitudin sollicitudin, quam ligula tempus urna, sed sagittis eros eros ac felis. In tristique tortor vitae lacinia commodo. Mauris venenatis ultrices purus nec fermentum. Nunc sit amet aliquet metus. Morbi nisl felis, gravida ac consequat vitae, blandit eu libero. Curabitur porta est in dui elementum porttitor. Maecenas fermentum, tortor ac feugiat fringilla, orci sem sagittis massa, a congue risus ipsum vel massa. Aliquam sit amet nunc vulputate, facilisis neque in, faucibus nisl. 你可以创建其他文章，来查看和验证站点的效果。你的网站应该像下面的图片一样。 主页显示最近的文章，每篇文章通过相关部分自动关联其他文章，有标签聚合和全文搜索。\n发布它 #\r现在只剩下发布你的网站了。我将会使用 Firebase 作为托管服务——这是一个免费的替代方案，如果你创建了更复杂的东西，它提供了高级功能。前往 Firebase 创建一个新项目，然后我们切换到 CLI 终端，这将是配置 Firebase 更加简单。\n让我们安装 Firebase CLI 工具 —— 如果你不是 MacOS，请查看 Firebase安装指南。\nbrew install firebase 现在登录并为你的项目初始化firebase托管服务。\nfirebase login firebase init 选择托管并继续。\n按照下面的图片进行，这是我推荐的方式。确保设置了 GitHub actions 工作流文件。这将保证你的 GitHub 仓库一旦有变化，就会立刻同步部署。\n然而，这些文件不会立刻开始运行，因为 Hugo 需要额外的步骤来提前构建。将下面的代码复制并粘贴到 .github 文件夹，同时保留文件中 firebase 生成的projectId。\nfirebase-hosting-merge.yml #\r# This file was auto-generated by the Firebase CLI # https://github.com/firebase/firebase-tools name: Deploy to Firebase Hosting on merge \u0026#39;on\u0026#39;: push: branches: - main jobs: build_and_deploy: runs-on: ubuntu-latest steps: - name: Hugo setup uses: peaceiris/actions-hugo@v2.6.0 env: ACTIONS_ALLOW_UNSECURE_COMMANDS: \u0026#39;true\u0026#39; - name: Check out code into the Go module directory uses: actions/checkout@v4 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Build with Hugo env: # For maximum backward compatibility with Hugo modules HUGO_ENVIRONMENT: production HUGO_ENV: production run: hugo -E -F --minify -d public - name: Deploy Production uses: FirebaseExtended/action-hosting-deploy@v0 with: repoToken: \u0026#39;${{ secrets.GITHUB_TOKEN }}\u0026#39; firebaseServiceAccount: \u0026#39;${{ secrets.FIREBASE_SERVICE_ACCOUNT_BLOWFISH_TUTORIAL }}\u0026#39; channelId: live projectId: blowfish-tutorial firebase-hosting-pull-request.yml #\r# This file was auto-generated by the Firebase CLI # https://github.com/firebase/firebase-tools name: Deploy to Firebase Hosting on PR \u0026#39;on\u0026#39;: pull_request jobs: build_and_preview: if: \u0026#39;${{ github.event.pull_request.head.repo.full_name == github.repository }}\u0026#39; runs-on: ubuntu-latest steps: - name: Hugo setup uses: peaceiris/actions-hugo@v2.6.0 env: ACTIONS_ALLOW_UNSECURE_COMMANDS: \u0026#39;true\u0026#39; - name: Check out code into the Go module directory uses: actions/checkout@v4 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Build with Hugo env: # For maximum backward compatibility with Hugo modules HUGO_ENVIRONMENT: production HUGO_ENV: production run: hugo -E -F --minify -d public - name: Deploy preview uses: FirebaseExtended/action-hosting-deploy@v0 with: repoToken: \u0026#39;${{ secrets.GITHUB_TOKEN }}\u0026#39; firebaseServiceAccount: \u0026#39;${{ secrets.FIREBASE_SERVICE_ACCOUNT_BLOWFISH_TUTORIAL }}\u0026#39; expires: 30d channelId: preview-${{ github.event.number }} projectId: blowfish-tutorial 最后一步是将你的代码提交到 GitHub，提交成功后 GitHub actions 工作流将会自动触发，并构建和部署你的网站。\ngit add . git commit -m \u0026#34;add github actions workflows\u0026#34; git push 你的 GitHub 仓库中的 actions 模块，将会显示类似下图的内容。\n当所有步骤完成之后，你的 Firebase 控制台将会显示类似下图的内容，包括一个可以查看网站的链接。我在\rhttps://blowfish-tutorial.web.app/中运行了这个教程。 Once all the steps finish, your Firebase console should show something like the image below - including the links to see your app – I got a version of this tutorial running on https://blowfish-tutorial.web.app/.\n结论和下一步 #\r现在你有了主页的第一个版本。你可以在本地进行更改，只要你提交代码，将会自动展示在你的网站中。 那么接下来要做什么呢？我给你留了一下链接，相信会对你有所帮你，其它这些链接会让你获得灵感并了解更多 Blowfish 和 Hugo 的内容。 Now you have your first version of your homepage. You can make changes locally and once you commit your code they will automatically be reflected online. What shall you do next? I’ll leave you with some useful links to get you inspired and learn more about Blowfish and Hugo.\nhttps://blowfish.page/docs/ https://blowfish.page/docs/configuration/ https://blowfish.page/docs/shortcodes/ https://blowfish.page/examples/ https://blowfish.page/users/ https://gohugo.io/documentation/ ","date":"2023-10-04","externalUrl":"https://nunocoracao.com/posts/202310-blowfish-tutorial/","permalink":"/zh-cn/guides/202310-blowfish-tutorial/","section":"Guides","summary":"一年前我创建了 Blowfish，这是一个为了打造我的个人主页而精心设计的 Hugo 主题。我决定将其作为一个开源项目。直到今天，Blowfish 已经变成了一个蓬勃发展的开源项目，在 GitHub 上拥有超过900个 star 和数百名用户。在本教程中，我将向你展示如何搭建并在几分钟内让你的网站运行起来。","title":"使用 Blowfish和 Hugo 构建你的主页","type":"guides"},{"content":"","date":"2023-10-04","externalUrl":null,"permalink":"/zh-cn/tags/%E6%8C%87%E5%8D%97/","section":"标签","summary":"","title":"指南","type":"tags"},{"content":"在你的文章中添加不同作者的简单示例。\n","date":"2023-10-04","externalUrl":null,"permalink":"/zh-cn/authors/","section":"作者列表示例","summary":"在你的文章中添加不同作者的简单示例。","title":"作者列表示例","type":"authors"},{"content":"","date":"2023-10-02","externalUrl":"https://blowfish-tutorial.web.app/","permalink":"/zh-cn/examples/blowfish-tutorial/","section":"Showcase","summary":"","title":"Blowfish Tutorial","type":"examples"},{"content":"\rSee what\u0026rsquo;s possible with Blowfish.\rThis section contains links to example templates and pages created using Blowfish to get you inspired.\n","date":"2023-10-02","externalUrl":null,"permalink":"/zh-cn/examples/","section":"Showcase","summary":"See what\u0026rsquo;s possible with Blowfish.\rThis section contains links to example templates and pages created using Blowfish to get you inspired.","title":"Showcase","type":"examples"},{"content":"","date":"2023-10-01","externalUrl":"https://github.com/nunocoracao/blowfish-tutorial","permalink":"/zh-cn/examples/repo-blowfish-tutorial/","section":"Showcase","summary":"","title":"Blowfish Tutorial - Repo","type":"examples"},{"content":"","date":"2022-11-07","externalUrl":"https://nunocoracao.github.io/blowfish_lite/","permalink":"/zh-cn/examples/blowfish-lite/","section":"Showcase","summary":"","title":"Blowfish Lite","type":"examples"},{"content":"","date":"2022-11-06","externalUrl":"https://nunocoracao.github.io/blowfish_artist/","permalink":"/zh-cn/examples/blowfish-artist/","section":"Showcase","summary":"","title":"Blowfish Artist","type":"examples"},{"content":"","date":"2022-11-06","externalUrl":"https://nunocoracao.github.io/blowfish_lowkey/","permalink":"/zh-cn/examples/blowfish-lowkey/","section":"Showcase","summary":"","title":"Blowfish Lowkey","type":"examples"},{"content":"","date":"2021-11-07","externalUrl":"https://github.com/nunocoracao/blowfish_lite/","permalink":"/zh-cn/examples/repo-blowfish-lite/","section":"Showcase","summary":"","title":"Blowfish Lite - Repo","type":"examples"},{"content":"","date":"2021-11-06","externalUrl":"https://github.com/nunocoracao/blowfish_artist/","permalink":"/zh-cn/examples/repo-blowfish-artist/","section":"Showcase","summary":"","title":"Blowfish Artist - Repo","type":"examples"},{"content":"","date":"2021-11-06","externalUrl":"https://github.com/nunocoracao/blowfish_lowkey/","permalink":"/zh-cn/examples/repo-blowfish-lowkey/","section":"Showcase","summary":"","title":"Blowfish Lowkey - Repo","type":"examples"},{"content":"","date":"2020-11-06","externalUrl":"https://nunocoracao.github.io/blowfish_template/","permalink":"/zh-cn/examples/blowfish-template/","section":"Showcase","summary":"","title":"Blowfish Template","type":"examples"},{"content":"","date":"2020-11-06","externalUrl":"https://github.com/nunocoracao/blowfish_template","permalink":"/zh-cn/examples/blowfish-template-repo/","section":"Showcase","summary":"","title":"Blowfish Template - GitHub Repo","type":"examples"},{"content":"Simply follow the standard Hugo Quick Start procedure to get up and running quickly.\nDetailed installation instructions can be found below. Instructions for updating the theme are also available.\nInstallation #\rThese instructions will get you up and running using Hugo and Blowfish from a completely blank state. Most of the dependencies mentioned in this guide can be installed using the package manager of choice for your platform.\nInstall Hugo #\rIf you haven\u0026rsquo;t used Hugo before, you will need to install it onto your local machine. You can check if it\u0026rsquo;s already installed by running the command hugo version.\nMake sure you are using Hugo version 0.87.0 or later as the theme takes advantage of some of the latest Hugo features.\rYou can find detailed installation instructions for your platform in the Hugo docs.\nBlowfish Tools (recommended) #\rWe just launched a new CLI tool to help you get started with Blowfish. It will create a new Hugo project, install the theme and set up the theme configuration files for you. It\u0026rsquo;s still in beta so please report any issues you find.\nInstall the CLI tool globally using npm (or other package manager):\nnpx blowfish-tools or\nnpm i -g blowfish-tools Then run the command blowfish-tools to start an interactive run which will guide you through creation and configuration use-cases.\nblowfish-tools You can also run the command blowfish-tools new to create a new Hugo project and install the theme in one go. Check the CLI help for more information.\nblowfish-tools new mynewsite Here\u0026rsquo;s a quick video of how fast it is to get started with Blowfish using the CLI tool:\nInstall without CLI #\rCreate a new site #\rRun the command hugo new site mywebsite to create a new Hugo site in a directory named mywebsite.\nNote that you can name the project directory whatever you choose, but the instructions below will assume it\u0026rsquo;s named mywebsite. If you use a different name, be sure to substitute it accordingly.\nDownload the Blowfish theme #\rThere several different ways to install the Blowfish theme into your Hugo website. From easiest to most difficult to install and maintain, they are:\nGit submodule (recommended) Hugo module Manual file copy If you\u0026rsquo;re unsure, choose the Git submodule method.\nInstall using git #\rThis method is the quickest and easiest for keeping the theme up-to-date. Besides Hugo and Go, you\u0026rsquo;ll also need to ensure you have Git installed on your local machine.\nChange into the directory for your Hugo website (that you created above), initialise a new git repository and add Blowfish as a submodule.\ncd mywebsite git init git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish Then continue to set up the theme configuration files.\nInstall using Hugo #\rFor this method you\u0026rsquo;ll use Hugo to manage your themes. Hugo uses Go to initialise and manage modules so you need to ensure you have go installed before proceeding.\nDownload and install Go. You can check if it\u0026rsquo;s already installed by using the command go version.\nMake sure you are using Go version 1.12 or later as Hugo requires this for modules to work correctly.\rFrom your Hugo project directory (that you created above), initialise modules for your website:\n# If you\u0026#39;re managing your project on GitHub hugo mod init github.com/\u0026lt;username\u0026gt;/\u0026lt;repo-name\u0026gt; # If you\u0026#39;re managing your project locally hugo mod init my-project Add the theme to your configuration by creating a new file config/_default/module.toml and adding the following:\n[[imports]] path = \u0026#34;github.com/nunocoracao/blowfish/v2\u0026#34; Start your server using hugo server and the theme will be downloaded automatically.\nContinue to set up the theme configuration files.\nInstall manually #\rDownload the latest release of the theme source code.\nDownload from Github\rExtract the archive, rename the folder to blowfish and move it to the themes/ directory inside your Hugo project\u0026rsquo;s root folder.\nContinue to set up the theme configuration files.\nSet up theme configuration files #\rIn the root folder of your website, delete the hugo.toml file that was generated by Hugo. Copy the *.toml config files from the theme into your config/_default/ folder. This will ensure you have all the correct theme settings and will enable you to easily customise the theme to your needs.\nNote: You should not overwrite the module.toml file if one already exists in your project!\rDepending on how you installed the theme you will find the theme config files in different places:\nHugo Modules: In the Hugo cache directory, or download a copy from GitHub Git submodule or Manual install: themes/blowfish/config/_default Once you\u0026rsquo;ve copied the files, your config folder should look like this:\nconfig/_default/ ├─ hugo.toml ├─ languages.en.toml ├─ markup.toml ├─ menus.en.toml ├─ module.toml # if you installed using Hugo Modules └─ params.toml Important: If you didn\u0026rsquo;t use Hugo Modules to install Blowfish, you must add the line theme = \u0026quot;blowfish\u0026quot; to the top of your hugo.toml file.\rNext steps #\rThe basic Blowfish installation is now complete. Continue to the section to learn more about configuring the theme.\nInstalling updates #\rFrom time to time there will be new releases posted that apply fixes and add new functionality to the theme. In order to take advantage of these changes, you will need to update the theme files on your website.\nHow you go about this will depend on the installation method you chose when the theme was originally installed. Instructions for each method can be found below.\nGit submodule Hugo module Manual file copy Update using git #\rGit submodules can be updated using the git command. Simply execute the following command and the latest version of the theme will be downloaded into your local repository:\ngit submodule update --remote --merge Once the submodule has been updated, rebuild your site and check everything works as expected.\nUpdate using Hugo #\rHugo makes updating modules super easy. Simply change into your project directory and execute the following command:\nhugo mod get -u Hugo will automatically update any modules that are required for your project. It does this by inspecting your module.toml and go.mod files. If you have any issues with the update, check to ensure these files are still configured correctly.\nThen simply rebuild your site and check everything works as expected.\nUpdate manually #\rUpdating Blowfish manually requires you to download the latest copy of the theme and replace the old version in your project.\nNote that any local customisations you have made to the theme files will be lost during this process.\rDownload the latest release of the theme source code.\nDownload from Github\rExtract the archive, rename the folder to blowfish and move it to the themes/ directory inside your Hugo project\u0026rsquo;s root folder. You will need to overwrite the existing directory to replace all the theme files.\nRebuild your site and check everything works as expected.\n","date":"16 August 2020","externalUrl":null,"permalink":"/docs/development/","section":"Services","summary":"Simply follow the standard Hugo Quick Start procedure to get up and running quickly.\nDetailed installation instructions can be found below. Instructions for updating the theme are also available.\nInstallation #\rThese instructions will get you up and running using Hugo and Blowfish from a completely blank state.","title":"AI Development","type":"docs"},{"content":"","date":"16 August 2020","externalUrl":null,"permalink":"/categories/development/","section":"Categories","summary":"","title":"Development","type":"categories"},{"content":"\rWe just launched a CLI tool to help you get started with Blowfish. It will help you with installation and configuration. Install the CLI tool globally using:\nnpx blowfish-tools The config files that ship with Blowfish contain all of the possible settings that the theme recognises. By default, many of these are commented out but you can simply uncomment them to activate or change a specific feature.\nBasic configuration #\rBefore creating any content, there are a few things you should set for a new installation. Starting in the config.toml file, set the baseURL and languageCode parameters. The languageCode should be set to the main language that you will be using to author your content.\n# config/_default/config.toml baseURL = \u0026#34;https://your_domain.com/\u0026#34; languageCode = \u0026#34;en\u0026#34; The next step is to configure the language settings. Although Blowfish supports multilingual setups, for now, just configure the main language.\nLocate the languages.en.toml file in the config folder. If your main language is English you can use this file as is. Otherwise, rename it so that it includes the correct language code in the filename. For example, for French, rename the file to languages.fr.toml.\nNote that the language code in the language config filename should match the languageCode setting in config.toml.\r# config/_default/languages.en.toml title = \u0026#34;My awesome website\u0026#34; [author] name = \u0026#34;My name\u0026#34; image = \u0026#34;img/author.jpg\u0026#34; headline = \u0026#34;A generally awesome human\u0026#34; bio = \u0026#34;A little bit about me\u0026#34; links = [ { twitter = \u0026#34;https://twitter.com/username\u0026#34; } ] The [author] configuration determines how the author information is displayed on the website. The image should be placed in the site\u0026rsquo;s assets/ folder. Links will be displayed in the order they are listed.\nIf you need ext\nColour schemes #\rBlowfish ships with a number of colour schemes out of the box. To change the scheme, simply set the colorScheme theme parameter. Valid options are blowfish (default), avocado, fire, ocean, forest, princess, neon, bloody, terminal, marvel, noir, autumn, congo, andslate.\n# config/_default/params.toml colorScheme = \u0026#34;blowfish\u0026#34; Blowfish defines a three-colour palette that is used throughout the theme. Each main colour contains ten shades which are based upon the colours that are included in Tailwind. The three main colours are used for the header, footer, and accent colours. Here are the colors for each scheme:\nBlowfish (default) #\rAvocado #\rFire #\rOcean #\rForest #\rPrincess #\rNeon #\rBloody #\rTerminal #\rMarvel #\rNoir #\rAutumn #\rCongo #\rSlate #\rOrganising content #\rBy default, Blowfish doesn\u0026rsquo;t force you to use a particular content type. In doing so you are free to define your content as you wish. You might prefer pages for a static site, posts for a blog, or projects for a portfolio.\nHere\u0026rsquo;s a quick overview of a basic Blowfish project. All content is placed within the content folder:\n. ├── assets │ └── img │ └── author.jpg ├── config │ └── _default ├── content │ ├── _index.md │ ├── about.md │ └── posts │ ├── _index.md │ ├── first-post.md │ └── another-post │ ├── aardvark.jpg │ └── index.md └── themes └── blowfish It\u0026rsquo;s important to have a firm grasp of how Hugo expects content to be organised as the theme is designed to take full advantage of Hugo page bundles. Be sure to read the official Hugo docs for more information.\nBlowfish is also flexible when it comes to taxonomies. Some people prefer to use tags and categories to group their content, others prefer to use topics.\nHugo defaults to using posts, tags and categories out of the box and this will work fine if that\u0026rsquo;s what you want. If you wish to customise this, however, you can do so by creating a taxonomies.toml configuration file:\n# config/_default/taxonomies.toml topic = \u0026#34;topics\u0026#34; This will replace the default tags and categories with topics. Refer to the Hugo Taxonomy docs for more information on naming taxonomies.\nWhen you create a new taxonomy, you will need to adjust the navigation links on the website to point to the correct sections, which is covered below.\nMenus #\rBlowfish has two menus that can be customised to suit the content and layout of your site. The main menu appears in the site header and the footer menu appears at the bottom of the page just above the copyright notice.\nBoth menus are configured in the menus.en.toml file. Similarly to the languages config file, if you wish to use another language, rename this file and replace en with the language code you wish to use.\n# config/_default/menus.toml [[main]] name = \u0026#34;Blog\u0026#34; pageRef = \u0026#34;posts\u0026#34; weight = 10 [[main]] name = \u0026#34;Topics\u0026#34; pageRef = \u0026#34;topics\u0026#34; weight = 20 [[main]] pre = \u0026#34;github\u0026#34; name = \u0026#34;GitHub\u0026#34; url = \u0026#34;https://github.com/nunocoracao/blowfish\u0026#34; weight = 30 [[main]] identifier = \u0026#34;github2\u0026#34; pre = \u0026#34;github\u0026#34; url = \u0026#34;https://github.com/nunocoracao/blowfish\u0026#34; weight = 40 [[footer]] name = \u0026#34;Privacy\u0026#34; url = \u0026#34;https://external-link\u0026#34; The name parameter specifies the text that is used in the menu link. You can also optionally provide a title which fills the HTML title attribute for the link.\nThe pageRef parameter allows you to easily reference Hugo content pages and taxonomies. It is the quickest way to configure the menu as you can simply refer to any Hugo content item and it will automatically build the correct link. To link to external URLs, the url parameter can be used.\nMenu links will be sorted from lowest to highest weight, and then alphabetically by name.\nBoth menus are completely optional and can be commented out if not required. Use the template provided in the file as a guide.\nNested menus #\rThe theme also supports nested menus. In order to use them you just need to define a parent entry in menu.toml and its sub-menus using the parent parameter to reference the parent. All properties can be used for sub-menus. pageRef and url can also be used in the parent entry. Nested menus are only available in the main menu not for the footer.\n# config/_default/menus.toml [[main]] name = \u0026#34;Parent\u0026#34; weight = 20 [[main]] name = \u0026#34;sub-menu 1\u0026#34; parent = \u0026#34;Parent\u0026#34; pageRef = \u0026#34;samples\u0026#34; weight = 20 [[main]] name = \u0026#34;sub-menu 2\u0026#34; parent = \u0026#34;Parent\u0026#34; pageRef = \u0026#34;samples\u0026#34; weight = 20 [[main]] name = \u0026#34;sub-menu 3\u0026#34; parent = \u0026#34;Parent\u0026#34; pre = \u0026#34;github\u0026#34; pageRef = \u0026#34;samples\u0026#34; weight = 20 Sub-Navigation menu #\rAdditionally, you can also configure a sub-navigation menu. Just define new menu entries as subnavigation in menus.toml. This will render a second line with sub-categories below the main header menu.\n# config/_default/menus.toml [[subnavigation]] name = \u0026#34;An interesting topic\u0026#34; pageRef = \u0026#34;tags/interesting-topic\u0026#34; weight = 10 [[subnavigation]] name = \u0026#34;My Awesome Category\u0026#34; pageRef = \u0026#34;categories/awesome\u0026#34; weight = 20 The default name is the pageRef title cased.\nThumbnails \u0026amp; Backgrounds #\rBlowfish was built so it would be easy to add visual support to your articles. If your familiar with Hugo article structure, you just need to place an image file (almost all formats are supported but we recommend .png or .jpg) that starts with feature* inside your article folder. And that\u0026rsquo;s it, Blowfish will then be able to both use the image as a thumbnail within your website as well as for oEmbed cards across social platforms.\nAdditionally, Blowfish also supports background hero images in articles and lists. In order to use a different image than the featured one, add an image file in which the name starts with background*.\nDetailed configuration #\rThe steps above are the bare minimum configuration. If you now run hugo server you will be presented with a blank Blowfish website. Detailed configuration is co\n","date":"15 August 2020","externalUrl":null,"permalink":"/docs/support/","section":"Services","summary":"We just launched a CLI tool to help you get started with Blowfish. It will help you with installation and configuration. Install the CLI tool globally using:\nnpx blowfish-tools The config files that ship with Blowfish contain all of the possible settings that the theme recognises.","title":"AI Support","type":"default"},{"content":"\rWe just launched a CLI tool to help you get started with Blowfish. It will help you with installation and configuration. Install the CLI tool globally using:\nnpx blowfish-tools The config files that ship with Blowfish contain all of the possible settings that the theme recognises. By default, many of these are commented out but you can simply uncomment them to activate or change a specific feature.\nBasic configuration #\rBefore creating any content, there are a few things you should set for a new installation. Starting in the config.toml file, set the baseURL and languageCode parameters. The languageCode should be set to the main language that you will be using to author your content.\n# config/_default/config.toml baseURL = \u0026#34;https://your_domain.com/\u0026#34; languageCode = \u0026#34;en\u0026#34; The next step is to configure the language settings. Although Blowfish supports multilingual setups, for now, just configure the main language.\nLocate the languages.en.toml file in the config folder. If your main language is English you can use this file as is. Otherwise, rename it so that it includes the correct language code in the filename. For example, for French, rename the file to languages.fr.toml.\nNote that the language code in the language config filename should match the languageCode setting in config.toml.\r# config/_default/languages.en.toml title = \u0026#34;My awesome website\u0026#34; [author] name = \u0026#34;My name\u0026#34; image = \u0026#34;img/author.jpg\u0026#34; headline = \u0026#34;A generally awesome human\u0026#34; bio = \u0026#34;A little bit about me\u0026#34; links = [ { twitter = \u0026#34;https://twitter.com/username\u0026#34; } ] The [author] configuration determines how the author information is displayed on the website. The image should be placed in the site\u0026rsquo;s assets/ folder. Links will be displayed in the order they are listed.\nColour schemes #\rBlowfish ships with a number of colour schemes out of the box. To change the scheme, simply set the colorScheme theme parameter. Valid options are blowfish (default), avocado, fire, ocean, forest, princess, neon, bloody, terminal, marvel, noir, autumn, congo, andslate.\n# config/_default/params.toml colorScheme = \u0026#34;blowfish\u0026#34; Blowfish defines a three-colour palette that is used throughout the theme. Each main colour contains ten shades which are based upon the colours that are included in Tailwind. The three main colours are used for the header, footer, and accent colours. Here are the colors for each scheme:\nBlowfish (default) #\rAvocado #\rFire #\rOcean #\rForest #\rPrincess #\rNeon #\rBloody #\rTerminal #\rMarvel #\rNoir #\rAutumn #\rCongo #\rSlate #\rOrganising content #\rBy default, Blowfish doesn\u0026rsquo;t force you to use a particular content type. In doing so you are free to define your content as you wish. You might prefer pages for a static site, posts for a blog, or projects for a portfolio.\nHere\u0026rsquo;s a quick overview of a basic Blowfish project. All content is placed within the content folder:\n. ├── assets │ └── img │ └── author.jpg ├── config │ └── _default ├── content │ ├── _index.md │ ├── about.md │ └── posts │ ├── _index.md │ ├── first-post.md │ └── another-post │ ├── aardvark.jpg │ └── index.md └── themes └── blowfish It\u0026rsquo;s important to have a firm grasp of how Hugo expects content to be organised as the theme is designed to take full advantage of Hugo page bundles. Be sure to read the official Hugo docs for more information.\nBlowfish is also flexible when it comes to taxonomies. Some people prefer to use tags and categories to group their content, others prefer to use topics.\nHugo defaults to using posts, tags and categories out of the box and this will work fine if that\u0026rsquo;s what you want. If you wish to customise this, however, you can do so by creating a taxonomies.toml configuration file:\n# config/_default/taxonomies.toml topic = \u0026#34;topics\u0026#34; This will replace the default tags and categories with topics. Refer to the Hugo Taxonomy docs for more information on naming taxonomies.\nWhen you create a new taxonomy, you will need to adjust the navigation links on the website to point to the correct sections, which is covered below.\nMenus #\rBlowfish has two menus that can be customised to suit the content and layout of your site. The main menu appears in the site header and the footer menu appears at the bottom of the page just above the copyright notice.\nBoth menus are configured in the menus.en.toml file. Similarly to the languages config file, if you wish to use another language, rename this file and replace en with the language code you wish to use.\n# config/_default/menus.toml [[main]] name = \u0026#34;Blog\u0026#34; pageRef = \u0026#34;posts\u0026#34; weight = 10 [[main]] name = \u0026#34;Topics\u0026#34; pageRef = \u0026#34;topics\u0026#34; weight = 20 [[main]] pre = \u0026#34;github\u0026#34; name = \u0026#34;GitHub\u0026#34; url = \u0026#34;https://github.com/nunocoracao/blowfish\u0026#34; weight = 30 [[main]] identifier = \u0026#34;github2\u0026#34; pre = \u0026#34;github\u0026#34; url = \u0026#34;https://github.com/nunocoracao/blowfish\u0026#34; weight = 40 [[footer]] name = \u0026#34;Privacy\u0026#34; url = \u0026#34;https://external-link\u0026#34; The name parameter specifies the text that is used in the menu link. You can also optionally provide a title which fills the HTML title attribute for the link.\nThe pageRef parameter allows you to easily reference Hugo content pages and taxonomies. It is the quickest way to configure the menu as you can simply refer to any Hugo content item and it will automatically build the correct link. To link to external URLs, the url parameter can be used.\nMenu links will be sorted from lowest to highest weight, and then alphabetically by name.\nBoth menus are completely optional and can be commented out if not required. Use the template provided in the file as a guide.\nNested menus #\rThe theme also supports nested menus. In order to use them you just need to define a parent entry in menu.toml and its sub-menus using the parent parameter to reference the parent. All properties can be used for sub-menus. pageRef and url can also be used in the parent entry. Nested menus are only available in the main menu not for the footer.\n# config/_default/menus.toml [[main]] name = \u0026#34;Parent\u0026#34; weight = 20 [[main]] name = \u0026#34;sub-menu 1\u0026#34; parent = \u0026#34;Parent\u0026#34; pageRef = \u0026#34;samples\u0026#34; weight = 20 [[main]] name = \u0026#34;sub-menu 2\u0026#34; parent = \u0026#34;Parent\u0026#34; pageRef = \u0026#34;samples\u0026#34; weight = 20 [[main]] name = \u0026#34;sub-menu 3\u0026#34; parent = \u0026#34;Parent\u0026#34; pre = \u0026#34;github\u0026#34; pageRef = \u0026#34;samples\u0026#34; weight = 20 Sub-Navigation menu #\rAdditionally, you can also configure a sub-navigation menu. Just define new menu entries as subnavigation in menus.toml. This will render a second line with sub-categories below the main header menu.\n# config/_default/menus.toml [[subnavigation]] name = \u0026#34;An interesting topic\u0026#34; pageRef = \u0026#34;tags/interesting-topic\u0026#34; weight = 10 [[subnavigation]] name = \u0026#34;My Awesome Category\u0026#34; pageRef = \u0026#34;categories/awesome\u0026#34; weight = 20 The default name is the pageRef title cased.\nThumbnails \u0026amp; Backgrounds #\rBlowfish was built so it would be easy to add visual support to your articles. If your familiar with Hugo article structure, you just need to place an image file (almost all formats are supported but we recommend .png or .jpg) that starts with feature* inside your article folder. And that\u0026rsquo;s it, Blowfish will then be able to both use the image as a thumbnail within your website as well as for oEmbed cards across social platforms.\nAdditionally, Blowfish also supports background hero images in articles and lists. In order to use a different image than the featured one, add an image file in which the name starts with background*.\n","date":"15 August 2020","externalUrl":null,"permalink":"/docs/training/","section":"Services","summary":"We just launched a CLI tool to help you get started with Blowfish. It will help you with installation and configuration. Install the CLI tool globally using:\nnpx blowfish-tools The config files that ship with Blowfish contain all of the possible settings that the theme recognises.","title":"AI Training","type":"docs"},{"content":"","date":"15 August 2020","externalUrl":null,"permalink":"/categories/support/","section":"Categories","summary":"","title":"Support","type":"categories"},{"content":"","date":"15 August 2020","externalUrl":null,"permalink":"/categories/training/","section":"Categories","summary":"","title":"Training","type":"categories"},{"content":"","date":"14 August 2020","externalUrl":null,"permalink":"/tags/sample/","section":"Tags","summary":"","title":"sample","type":"tags"},{"content":"","date":"14 August 2020","externalUrl":null,"permalink":"/tags/users/","section":"Tags","summary":"","title":"users","type":"tags"},{"content":"","date":"2020-08-14","externalUrl":null,"permalink":"/zh-cn/tags/%E7%A4%BA%E4%BE%8B/","section":"标签","summary":"","title":"示例","type":"tags"},{"content":"这里有使用 Blowfish 构建的网站实例。点击\r这里以 JSON 形式查看完整列表。\n您也是 Blowfish 用户？ 提交 PR来把你的网站加入此列表。\r","date":"2020-08-14","externalUrl":null,"permalink":"/zh-cn/users/","section":"用户列表","summary":"这里有使用 Blowfish 构建的网站实例。点击 这里以 JSON 形式查看完整列表。 您","title":"用户列表","type":"users"},{"content":"","date":"2020-08-14","externalUrl":null,"permalink":"/zh-cn/tags/%E5%8F%8B%E9%93%BE/","section":"标签","summary":"","title":"友链","type":"tags"},{"content":"","date":"22 December 1987","externalUrl":null,"permalink":"/tags/template/","section":"Tags","summary":"","title":"template","type":"tags"},{"content":"","date":"1987-12-22","externalUrl":null,"permalink":"/zh-cn/tags/%E6%A8%A1%E6%9D%BF/","section":"标签","summary":"","title":"模板","type":"tags"},{"content":"感谢您愿意为 Blowfish 社区做出贡献。\n如何开始？ #\r这是一篇模板文章，将解释如何为 Blowfish 的指南部分创建新文章。\nClone Blowfish 仓库 #\r使用以下命令 clone 此仓库：\ngit clone https://github.com/nunocoracao/blowfish.git 配置您的文档 #\r复制并粘贴您要创建的 .md 文档所在的整个文件夹。 使用 YYYYMM-\u0026lt;英文标题\u0026gt; 的格式（例如：200601-tutorial）命名文档，不允许有空格。\n编写您的指南 #\r编写您的指南 :)\n在 img 文件夹中储存图像并按下述格式引用它们：\n![]() Image caption\r提交 PR #\r提交您的 PR ，Blowfish 团队在这里提前感谢您对我们这个项目的贡献。\n","date":"1987-12-22","externalUrl":null,"permalink":"/zh-cn/guides/template/","section":"Guides","summary":"感谢您愿意为 Blowfish 社区做出贡献。 如何开始？ # 这是一篇模板文章，将","title":"使用指南模板","type":"guides"},{"content":"假装这里有一份第二位作者的简介。\n","date":"0001-01-01","externalUrl":null,"permalink":"/zh-cn/authors/secondauthor/","section":"作者列表示例","summary":"假装这里有一份第二位作者的简介。","title":"Dummy Second Author","type":"authors"},{"content":"","date":"0001-01-01","externalUrl":null,"permalink":"/zh-cn/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"Blowfish 支持基于 Hugo 的所有分类方法。同时，当前的标签预览页也支持展示自定义内容。\n在这里可以为每个分类添加额外的描述信息。查看下面的\r高级标签页面，了解更多。\n","date":"0001-01-01","externalUrl":null,"permalink":"/zh-cn/keywords/","section":"标签","summary":"Blowfish 支持基于 Hugo 的所有分类方法。同时，当前的标签预览页也支持展示","title":"标签","type":"keywords"},{"content":"这是高级标记。类似其他 Blowfish 中的其他列表页面，你可以在分类列表页添加自定义内容，这部分内容会显示在顶部。🚀\n你也可以用这些内容来定义 Hugo 的元数据，比如标题和描述。这些内容可以被用来增强 SEO 或其他目的。\n","date":"0001-01-01","externalUrl":null,"permalink":"/zh-cn/categories/advanced/","section":"标签","summary":"这是高级标记。类似其他 Blowfish 中的其他列表页面，你可以在分类列表页","title":"高级","type":"categories"},{"content":"这是高级标记。类似其他 Blowfish 中的其他列表页面，你可以在分类列表页添加自定义内容，这部分内容会显示在顶部。🚀\n你也可以用这些内容来定义 Hugo 的元数据，比如标题和描述。这些内容可以被用来增强 SEO 或其他目的。\n","date":"0001-01-01","externalUrl":null,"permalink":"/zh-cn/keywords/advanced/","section":"标签","summary":"这是高级标记。类似其他 Blowfish 中的其他列表页面，你可以在分类列表页","title":"高级","type":"keywords"},{"content":"这是高级标记。类似其他 Blowfish 中的其他列表页面，你可以在分类列表页添加自定义内容，这部分内容会显示在顶部。🚀\n你也可以用这些内容来定义 Hugo 的元数据，比如标题和描述。这些内容可以被用来增强 SEO 或其他目的。\n","date":"0001-01-01","externalUrl":null,"permalink":"/zh-cn/tags/advanced/","section":"标签","summary":"这是高级标记。类似其他 Blowfish 中的其他列表页面，你可以在分类列表页","title":"高级","type":"tags"}]